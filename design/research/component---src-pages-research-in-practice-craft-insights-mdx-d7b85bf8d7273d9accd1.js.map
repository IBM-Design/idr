{"version":3,"file":"component---src-pages-research-in-practice-craft-insights-mdx-d7b85bf8d7273d9accd1.js","mappings":"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","sources":["webpack://idr-website-gatsby-theme/./src/pages/research-in-practice/craft-insights.mdx","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack://idr-website-gatsby-theme/./node_modules/gatsby-theme-carbon/src/templates/Default.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/runner/work/idr/idr/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst ResourceCard = makeShortcode(\"ResourceCard\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Inspire action. Design research insights result from quality data, strong synthesis, thoughtful analysis, and articulate implications. High quality insights are never a travelog but should inform what the team will make next.`}</p>\n    </PageDescription>\n    <h2>{`Get in the loop`}</h2>\n    <p>{`An assumption is something you think might be true but needs to be verified. Identifying and addressing assumptions is key to mitigating risk. Start with what you know and what you do not know. It can be easy to get bogged down in the “what ifs” or the “need to know everything” feeling. If that happens, try prioritizing what your assumptions and what you don’t know.`}</p>\n    <p>{`Address and evaluate your assumptions and questions using the Enterprise Design Thinking toolkit.`}</p>\n    <Row className=\"resource-card-group\" mdxType=\"Row\">\n  <Column noGutterSm={true} colSm={4} colMd={2} colMd={3} colLg={4} mdxType=\"Column\">\n    <ResourceCard title=\"Toolkit: Assumptions and Questions\" aspectRatio=\"2:1\" href=\"https://www.ibm.com/design/thinking/page/toolkit/activity/assumptions-and-questions\" mdxType=\"ResourceCard\" />\n  </Column>\n    </Row>\n    <div>&nbsp;</div>\n    <div>&nbsp;</div>\n    <p>{`With a prioritized list in hand, validate your questions by reframing them as testable statements. For example, a broad research objective might be, “How long do users spend looking for content?” Try turning that into a provable statement such as: “Users need a more contextual way to find answers to complete everyday tasks.” Then, you can collect evidence that proves or disproves that statement.`}</p>\n    <p>{`If it is not testable, rewrite the statement until you can make a feasible research protocol. Assumptions need to be proven true or false with evidence to move your team forward with confidence.`}</p>\n    <h2>{`Collect quality data`}</h2>\n    <p>{`Data collections describe the gathering, measurement, and control of information within a research activity. Raw data exists in many mediums: sticky notes, photographs, recordings, objects, survey answers, academic articles, customer complaints, error logs, analytics, and more. Choose the appropriate data collection and research method based on the needs of your team.`}</p>\n    <p>{`Keep this adage in mind : garbage in, garbage out. Gather data that reflects honest behaviors and reactions. Remember that the collection techniques used can influence how users respond. Asking users to answer difficult questions over the phone, face-to-face, or in a survey can elicit different answers.`}</p>\n    <p>{`Make an effort to collect replicable and consistent data that encompasses a broad range of real user experiences, but don’t ignore the outliers. While you cannot design for all extreme characteristics, your team can understand the entire spectrum of needs. With the outliers, you may find unexpected opportunities.`}</p>\n    <p>{`Clean your data and reduce human error before using. For quantitative data, remove inaccuracies from your data sets. You can clean qualitative data by screening participants before inviting them to a study or by removing a participant’s data from the collection before it’s synthesized.`}</p>\n    <h2>{`Organize your data through synthesis`}</h2>\n    <p>{`Data synthesis involves the organization, categorization, and description of a body of data. Try organizing your data in a few different ways—like grouping, sorting, and tallying—to clarify information.`}</p>\n    <p>{`Sometimes, the right synthesis method can depend on the context and collection method used. For example, if you collected data through a series of phone interviews, you may choose affinity diagramming or coding to help you visually map the information in new ways. However, if you collected data through a quantitative method, a descriptive summary can be beneficial.`}</p>\n    <p>{`As a design researcher, avoid creating artifacts just for the sake of creating them. For example, how many times have you created a user journey map that was viewed once and then stored away in an email? Instead, use artifacts to help you make sense of the data you collect. Aim to constantly inform your offering’s roadmap. Bring research into the discussion rather than making it an item to complete on the team’s to-do list.`}</p>\n    <h2>{`Seek patterns through data analysis`}</h2>\n    <p>{`Data analysis seeks to uncover patterns and inferences from synthesized data and should breed quality insights your team can use.`}</p>\n    <p>{`After you organize your data, interpret it in a meaningful, evidence-based way. Explain the data by looking for patterns. Make sure that you address the root cause, not the symptoms. Find the factors that contribute to the main problem. Sometimes, it can be helpful to look for contradictions in your data and explore why they might occur.`}</p>\n    <p>{`There are a variety of tools and resources to help analyze data. One popular method for analyzing qualitative user data is an experience map. For quantitative data, try exploratory data analysis or inferential statistics.`}</p>\n    <p>{`Get started with the Enterprise Design Thinking toolkit.`}</p>\n    <Row className=\"resource-card-group\" mdxType=\"Row\">\n  <Column noGutterSm={true} colSm={4} colMd={2} colMd={3} colLg={4} mdxType=\"Column\">\n    <ResourceCard title=\"Toolkit: As-is Scenario Map\" aspectRatio=\"2:1\" href=\"https://www.ibm.com/design/thinking/page/toolkit/activity/as-is-scenario-map\" mdxType=\"ResourceCard\" />\n  </Column>\n    </Row>\n    <div>&nbsp;</div>\n    <div>&nbsp;</div>\n    <h2>{`Create powerful research insights`}</h2>\n    <p>{`Research insights come from your analyzed data. They should be original, non-obvious, and actionable. They often explain the “how” or “why” rather than the “what” or “when”, and they might reveal people’s true motivations beyond just their actions.`}</p>\n    <p>{`You will likely craft many insights as a result of your analyzed data. Prioritize the findings based on impact, and rank them to influence team decisions appropriately. Choose those insights that require the least expense but result in high impact. A team is limited in what it can deliver depending on bandwidth, skills, and resources and your prioritization might shift as understanding increases.`}</p>\n    <h2>{`Where do you come in?`}</h2>\n    <h4>{`The Explorer:`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`What assumptions or questions do I have?`}</li>\n      <li parentName=\"ul\">{`Are there any opportunities to help my team synthesize?`}</li>\n      <li parentName=\"ul\">{`Do these insights explain the “how” rather than the “what?”`}</li>\n    </ul>\n    <h4>{`The Guide:`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Is my team making decisions based on assumptions or questions?`}</li>\n      <li parentName=\"ul\">{`Could I write any testable statements today?`}</li>\n      <li parentName=\"ul\">{`What’s the best way of synthesizing this data?`}</li>\n      <li parentName=\"ul\">{`What patterns do I see?`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageHeader-module--bx--text-truncate--end--b8JtW\";\nexport var bxTextTruncateFront = \"PageHeader-module--bx--text-truncate--front--WwZFh\";\nexport var pageHeader = \"PageHeader-module--page-header--NqfPe\";\nexport var darkMode = \"PageHeader-module--dark-mode--WCeH8\";\nexport var withTabs = \"PageHeader-module--with-tabs--vbQ-W\";\nexport var text = \"PageHeader-module--text--Er2EO\";","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"EditLink-module--bx--text-truncate--end--uI0cF\";\nexport var bxTextTruncateFront = \"EditLink-module--bx--text-truncate--front--HxjcS\";\nexport var link = \"EditLink-module--link--IDrl1\";\nexport var row = \"EditLink-module--row--BEmSX\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageTabs-module--bx--text-truncate--end--OC59x\";\nexport var bxTextTruncateFront = \"PageTabs-module--bx--text-truncate--front--5I6-L\";\nexport var tabsContainer = \"PageTabs-module--tabs-container--Cdfzw\";\nexport var list = \"PageTabs-module--list--xLqxG\";\nexport var listItem = \"PageTabs-module--list-item--024o6\";\nexport var link = \"PageTabs-module--link--Kz-7R\";\nexport var selectedItem = \"PageTabs-module--selected-item--aBB0K\";","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport * as styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"last-modified-date-module--bx--text-truncate--end--QgCc7\";\nexport var bxTextTruncateFront = \"last-modified-date-module--bx--text-truncate--front--kel8a\";\nexport var text = \"last-modified-date-module--text--ogPQF\";\nexport var row = \"last-modified-date-module--row--XJoYQ\";","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","Row","Column","ResourceCard","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","className","noGutterSm","colSm","colMd","colLg","title","aspectRatio","href","parentName","isMDXComponent","theme","tabs","cx","length","id","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","branch","PageTabs","render","this","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","Link","to","React","date","lastModified","Date","toLocaleDateString","day","year","month","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils"],"sourceRoot":""}